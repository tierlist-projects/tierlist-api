package com.tierlist.tierlist.support.category;

import com.tierlist.tierlist.category.application.domain.model.CategoryFavorite;
import com.tierlist.tierlist.category.application.port.out.persistence.CategoryFavoriteRepository;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class FakeCategoryFavoriteRepository implements CategoryFavoriteRepository {

  private List<CategoryFavorite> data = new ArrayList<>();
  private Long autoGeneratedId = 0L;

  @Override
  public CategoryFavorite save(CategoryFavorite categoryFavorite) {
    Long id = categoryFavorite.getId();
    if (id == null || id == 0) {
      CategoryFavorite newCategoryFavorite = CategoryFavorite.builder()
          .id(autoGeneratedId)
          .memberId(categoryFavorite.getMemberId())
          .categoryId(categoryFavorite.getCategoryId())
          .build();
      data.add(newCategoryFavorite);
      return newCategoryFavorite;
    }

    data.removeIf(item -> item.getId().equals(id));
    data.add(categoryFavorite);
    return categoryFavorite;
  }

  @Override
  public Optional<CategoryFavorite> findByMemberIdAndCategoryId(Long memberId, Long categoryId) {
    return data.stream()
        .filter(item -> item.getMemberId().equals(memberId) &&
            item.getCategoryId().equals(categoryId))
        .findFirst();
  }

  @Override
  public void delete(CategoryFavorite categoryFavorite) {
    data.removeIf(item -> item.getId().equals(categoryFavorite.getId()));
  }
}
