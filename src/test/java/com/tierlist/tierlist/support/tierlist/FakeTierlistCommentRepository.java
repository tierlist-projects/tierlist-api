package com.tierlist.tierlist.support.tierlist;

import com.tierlist.tierlist.tierlist.application.domain.model.TierlistComment;
import com.tierlist.tierlist.tierlist.application.port.out.persistence.TierlistCommentRepository;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class FakeTierlistCommentRepository implements TierlistCommentRepository {

  private List<TierlistComment> data = new ArrayList<>();
  private Long autoGeneratedId = 0L;

  @Override
  public TierlistComment save(TierlistComment tierlistComment) {
    Long id = tierlistComment.getId();
    if (id == null || id == 0) {
      TierlistComment newTierlistComment = TierlistComment
          .builder()
          .id(++autoGeneratedId)
          .content(tierlistComment.getContent())
          .createdAt(tierlistComment.getCreatedAt())
          .modifiedAt(tierlistComment.getModifiedAt())
          .tierlistId(tierlistComment.getTierlistId())
          .writerId(tierlistComment.getWriterId())
          .parentCommentId(tierlistComment.getParentCommentId())
          .build();
      data.add(newTierlistComment);
      return newTierlistComment;
    }

    data.removeIf(item -> item.getId().equals(id));
    data.add(tierlistComment);
    return tierlistComment;
  }

  @Override
  public Optional<TierlistComment> findById(Long tierlistCommentId) {
    return data.stream().filter(tierlist -> tierlist.getId().equals(tierlistCommentId)).findFirst();
  }
}
