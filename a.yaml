apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: sonarqube
      meta.helm.sh/release-namespace: sonarqube
    creationTimestamp: "2024-04-03T06:01:04Z"
    labels:
      app.kubernetes.io/instance: sonarqube
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: postgresql
      helm.sh/chart: postgresql-10.15.0
    name: sonarqube-postgresql
    namespace: sonarqube
    resourceVersion: "375934"
    uid: a353aff9-51b1-437c-b71d-6ab69d37dfdd
  spec:
    clusterIP: 10.108.238.53
    clusterIPs:
    - 10.108.238.53
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-postgresql
      port: 5432
      protocol: TCP
      targetPort: tcp-postgresql
    selector:
      app.kubernetes.io/instance: sonarqube
      app.kubernetes.io/name: postgresql
      role: primary
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: sonarqube
      meta.helm.sh/release-namespace: sonarqube
    creationTimestamp: "2024-04-03T06:01:04Z"
    labels:
      app.kubernetes.io/instance: sonarqube
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: postgresql
      helm.sh/chart: postgresql-10.15.0
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    name: sonarqube-postgresql-headless
    namespace: sonarqube
    resourceVersion: "375926"
    uid: ea6bfc67-725d-416b-87ce-63baeb635e9b
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-postgresql
      port: 5432
      protocol: TCP
      targetPort: tcp-postgresql
    publishNotReadyAddresses: true
    selector:
      app.kubernetes.io/instance: sonarqube
      app.kubernetes.io/name: postgresql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
---
apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: sonarqube
      meta.helm.sh/release-namespace: sonarqube
    creationTimestamp: "2024-04-03T06:01:04Z"
    labels:
      app: sonarqube
      app.kubernetes.io/managed-by: Helm
      chart: sonarqube-10.4.1_2389
      heritage: Helm
      release: sonarqube
    name: sonarqube-sonarqube
    namespace: sonarqube
    resourceVersion: "375930"
    uid: 5dc591c2-9ccd-4ccf-aaee-5ac9082dbb0b
  spec:
    clusterIP: 10.108.255.243
    clusterIPs:
    - 10.108.255.243
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: http
    selector:
      app: sonarqube
      release: sonarqube
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
---
apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: sonarqube
      meta.helm.sh/release-namespace: sonarqube
    creationTimestamp: "2024-04-03T06:01:04Z"
    generation: 2
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: sonarqube
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: postgresql
      helm.sh/chart: postgresql-10.15.0
    name: sonarqube-postgresql
    namespace: sonarqube
    resourceVersion: "379206"
    uid: 9896b395-77f6-45c4-a5d6-759967410c65
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: sonarqube
        app.kubernetes.io/name: postgresql
        role: primary
    serviceName: sonarqube-postgresql-headless
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: primary
          app.kubernetes.io/instance: sonarqube
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: postgresql
          helm.sh/chart: postgresql-10.15.0
          role: primary
        name: sonarqube-postgresql
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: primary
                    app.kubernetes.io/instance: sonarqube
                    app.kubernetes.io/name: postgresql
                namespaces:
                - sonarqube
                topologyKey: kubernetes.io/hostname
              weight: 1
        automountServiceAccountToken: false
        containers:
        - env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: POSTGRESQL_PORT_NUMBER
            value: "5432"
          - name: POSTGRESQL_VOLUME_DIR
            value: /bitnami/postgresql
          - name: PGDATA
            value: /bitnami/postgresql/data
          - name: POSTGRES_POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgresql-postgres-password
                name: sonarqube-postgresql
          - name: POSTGRES_USER
            value: sonarUser
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgresql-password
                name: sonarqube-postgresql
          - name: POSTGRES_DB
            value: sonarDB
          - name: POSTGRESQL_ENABLE_LDAP
            value: "no"
          - name: POSTGRESQL_ENABLE_TLS
            value: "no"
          - name: POSTGRESQL_LOG_HOSTNAME
            value: "false"
          - name: POSTGRESQL_LOG_CONNECTIONS
            value: "false"
          - name: POSTGRESQL_LOG_DISCONNECTIONS
            value: "false"
          - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
            value: "off"
          - name: POSTGRESQL_CLIENT_MIN_MESSAGES
            value: error
          - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
            value: pgaudit
          image: docker.io/bitnami/postgresql:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready -U "sonarUser" -d "dbname=sonarDB" -h 127.0.0.1 -p
                5432
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: sonarqube-postgresql
          ports:
          - containerPort: 5432
            name: tcp-postgresql
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - -e
              - |
                exec pg_isready -U "sonarUser" -d "dbname=sonarDB" -h 127.0.0.1 -p 5432
                [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /dev/shm
            name: dshm
          - mountPath: /bitnami/postgresql
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            medium: Memory
          name: dshm
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: sonarqube-postgresql-565fdb5f4c
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updateRevision: sonarqube-postgresql-565fdb5f4c
    updatedReplicas: 1
---
apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: sonarqube
      meta.helm.sh/release-namespace: sonarqube
    creationTimestamp: "2024-04-03T06:01:04Z"
    generation: 1
    labels:
      app: sonarqube
      app.kubernetes.io/component: sonarqube-sonarqube
      app.kubernetes.io/instance: sonarqube
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: sonarqube-sonarqube-sonarqube
      app.kubernetes.io/part-of: sonarqube
      app.kubernetes.io/version: 10.4.1-community
      chart: sonarqube-10.4.1_2389
      heritage: Helm
      release: sonarqube
    name: sonarqube-sonarqube
    namespace: sonarqube
    resourceVersion: "379382"
    uid: db4450f3-5af3-42a9-89de-1605093238f9
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: sonarqube
        release: sonarqube
    serviceName: sonarqube-sonarqube
    template:
      metadata:
        annotations:
          checksum/config: 82ecfe559f90532e0a3bd0a8194373def3f6151d07476100d7771fba482efcfb
          checksum/init-fs: bbb841fbb8fe037e2803a68279d37edfe9c7750d93e6fb29bcf7d1190bac42d0
          checksum/init-sysctl: bb1657dc1fa0ef8812cb203e3311e22846a1ab8c36e46f17633077d40dffe6d4
          checksum/plugins: 83b9050ea27137256a65ed86e7bdb4ee24341e08ec46765d596894131d8ca0cc
          checksum/secret: 0ec744ca5cd134add59f978c36c06be44d14ad64f80513897fa6544653de33f7
        creationTimestamp: null
        labels:
          app: sonarqube
          release: sonarqube
      spec:
        containers:
        - env:
          - name: SONAR_HELM_CHART_VERSION
            value: 10.4.1_2389
          - name: SONAR_WEB_JAVAOPTS
          - name: SONAR_WEB_CONTEXT
            value: /
          - name: SONAR_CE_JAVAOPTS
          - name: SONAR_JDBC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgresql-password
                name: sonarqube-postgresql
          - name: SONAR_WEB_SYSTEMPASSCODE
            valueFrom:
              secretKeyRef:
                key: SONAR_WEB_SYSTEMPASSCODE
                name: sonarqube-sonarqube-monitoring-passcode
          envFrom:
          - configMapRef:
              name: sonarqube-sonarqube-jdbc-config
          image: sonarqube:10.4.1-community
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - |
                host="$(hostname -i || echo '127.0.0.1')"
                wget --no-proxy --quiet -O /dev/null --timeout=1 --header="X-Sonar-Passcode: $SONAR_WEB_SYSTEMPASSCODE" "http://${host}:9000/api/system/liveness"
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          name: sonarqube
          ports:
          - containerPort: 9000
            name: http
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - "#!/bin/bash\n# A Sonarqube container is considered ready if the status
                is UP, DB_MIGRATION_NEEDED or DB_MIGRATION_RUNNING\n# status about
                migration are added to prevent the node to be kill while sonarqube
                is upgrading the database.\nhost=\"$(hostname -i || echo '127.0.0.1')\"\nif
                wget --no-proxy -qO- http://${host}:9000/api/system/status | grep
                -q -e '\"status\":\"UP\"' -e '\"status\":\"DB_MIGRATION_NEEDED\"'
                -e '\"status\":\"DB_MIGRATION_RUNNING\"'; then\n\texit 0\nfi\nexit
                1\n"
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 800m
              memory: 4Gi
            requests:
              cpu: 400m
              memory: 2Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          startupProbe:
            failureThreshold: 24
            httpGet:
              path: /api/system/status
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/sonarqube/data
            name: sonarqube
            subPath: data
          - mountPath: /opt/sonarqube/temp
            name: sonarqube
            subPath: temp
          - mountPath: /opt/sonarqube/logs
            name: sonarqube
            subPath: logs
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - set -o pipefail;for i in {1..200};do (echo > /dev/tcp/sonarqube-postgresql/5432)
            && exit 0; sleep 2;done; exit 1
          command:
          - /bin/bash
          - -c
          image: sonarqube:10.4.1-community
          imagePullPolicy: IfNotPresent
          name: wait-for-db
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /bin/bash
          - -e
          - /tmp/scripts/init_sysctl.sh
          image: sonarqube:10.4.1-community
          imagePullPolicy: IfNotPresent
          name: init-sysctl
          resources: {}
          securityContext:
            privileged: true
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/scripts/
            name: init-sysctl
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 0
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: init_sysctl.sh
              path: init_sysctl.sh
            name: sonarqube-sonarqube-init-sysctl
          name: init-sysctl
        - configMap:
            defaultMode: 420
            items:
            - key: init_fs.sh
              path: init_fs.sh
            name: sonarqube-sonarqube-init-fs
          name: init-fs
        - configMap:
            defaultMode: 420
            items:
            - key: install_plugins.sh
              path: install_plugins.sh
            name: sonarqube-sonarqube-install-plugins
          name: install-plugins
        - emptyDir: {}
          name: sonarqube
        - emptyDir: {}
          name: tmp-dir
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: sonarqube-sonarqube-677565fcd4
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: sonarqube-sonarqube-677565fcd4
    updatedReplicas: 1
---
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
    creationTimestamp: "2024-04-03T06:01:04Z"
    finalizers:
    - kubernetes.io/pvc-protection
    labels:
      app.kubernetes.io/instance: sonarqube
      app.kubernetes.io/name: postgresql
      role: primary
    name: data-sonarqube-postgresql-0
    namespace: sonarqube
    resourceVersion: "376616"
    uid: e60e23c6-425c-4563-a70e-3118b57a6e4e
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20Gi
    volumeMode: Filesystem
    volumeName: devops-pv
  status:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 30Gi
    phase: Bound
kind: List
metadata:
  resourceVersion: ""